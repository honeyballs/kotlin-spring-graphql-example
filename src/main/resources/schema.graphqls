type Query {
    categories: [Category!]!
    productById (id: ID!): Product
    categoryByName (name: String!): Category
}

type Mutation {
    addMovies(movies: [MovieInput!]!): [ID!]!
}

type Category {
    id: ID!
    name: String!
    products (sortBy: SortBy = PRICE, sortOrder: SortOrder = ASC): [Product!]!
}

interface Product {
    id: ID!
    name: String!
    price: Float!
    discount: Float
    categoryName: String!
}

type Movie implements Product{
    id: ID!
    name: String!
    price: Float!
    discount: Float
    categoryName: String!
    director: String!
    releaseYear: Int!
}

type Book implements Product{
    id: ID!
    name: String!
    price: Float!
    discount: Float
    categoryName: String!
    author: String!
    releaseYear: Int!
    isbn: String!
}

input MovieInput {
    name: String!
    price: Float!
    discount: Float
    director: String!
    releaseYear: Int!
}

enum SortOrder {
    ASC
    DESC
}

enum SortBy {
    PRICE
    ALPHABETICALLY
}

#union ProductUnion = Movie | Book